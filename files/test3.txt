A linguagem de programação C foi inventada no começo dos anos 70 como uma linguagem de implementação de sistema para o nascente sistema operacional Unix. Derivada da linguagem sem tipos BCPL, ela evoluiu para um modelo estruturado; criada numa minúscula máquina como uma ferramenta para melhorar um ambiente de programação escasso, ela tornou-se um das linguagens dominantes de hoje. Este documento estuda sua evolução.
A linguagem C tomou existência nos anos de 1969 - 1973, em paralelo com o primitivo desenvolvimento do sistema operacional Unix; o período mais criativo ocorreu durante 1972. Outra inundação de mudanças apareceu entre 1977 e 1979, quando a portabilidade do sistema Unix estava sendo demonstrada. No meio deste segundo período, a primeira grande descrição disponível da linguagem apareceu: A Linguagem de Programação C, freqüentemente chamada de 'livro branco' ou 'K&R' [Kernighan 78]. Finalmente, na metade dos anos 80, a linguagem foi oficialmente padronizada pelo comitê ANSI X3J11, o qual fez novas mudanças. Até o começo dos anos 80, apesar de existirem compiladores para uma variedade de arquiteturas de máquinas e sistemas operacionais, a linguagem foi quase exclusivamente associada com o Unix; mais recentemente, ela tem difundido-se mais extensamente, e hoje está entre a linguagens mais comumente usada por toda a indústria de computação.
As linguagens B e C tem vários descendentes diretos, entretanto elas não rivalizam com Pascal na geração de descendência. Uma filial lateral desenvolveu-se cedo. Quando Steve Johnson visitou a Universidade de Waterloo em 1972, ele trouxe a B com ele. Lá ela tornou-se popular em máquinas Honeywell e depois gerou Eh e Zed (a resposta canadense para "o que segue B?"). Quando Johnson retornou ao Bell Labs em 1973, ele estava desconcertado por achar que a linguagem que ele mesmo tinha semeado no Canadá tinha evoluído ao voltar para casa; até mesmo seu programa yacc tinha sido reescrito em C por Aland Snyder.
Os mais recentes descendentes da C formal incluem Concurrent C [Gehani 89], Objective C [Cox 86], C* [Thinking 90] e especialmente C++ [Stroustrup 86]. A linguagem é também usada globalmente como uma representação intermediária (essencialmente, como uma linguagem assembler portátil) para uma larga variedade de compiladores, tanto para descendentes diretos como C++ ou linguagens independentes como Modula 3 [Nelson 91] e Eiffel [Meyer 88].